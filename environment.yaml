# reasons you might want to use `environment.yaml` instead of `requirements.txt`:
# - pip installs packages in a loop, without ensuring dependencies across all packages
#   are fulfilled simultaneously, but conda achieves proper dependency control across
#   all packages
# - conda allows for installing packages without requiring certain compilers or
#   libraries to be available in the system, since it installs precompiled binaries

name: myenv

channels:
  - pytorch
  - conda-forge
  - defaults

# it is strongly recommended to specify versions of packages installed through conda
# to avoid situation when version-unspecified packages install their latest major
# versions which can sometimes break things

# current approach below keeps the dependencies in the same major versions across all
# users, but allows for different minor and patch versions of packages where backwards
# compatibility is usually guaranteed

dependencies:
  - pytorch=2.*
  - torchvision=0.*
  - lightning=2.*
  - torchmetrics=0.*
  - hydra-core=1.*
  - rich=13.*
  - pre-commit=3.*
  - pytest=7.*

  # --------- loggers --------- #
  # - wandb
  # - neptune-client
  # - mlflow
  # - comet-ml
  # - aim>=3.16.2 # no lower than 3.16.2, see https://github.com/aimhubio/aim/issues/2550

  - pip>=23
  - pip:
      - hydra-optuna-sweeper
      - hydra-colorlog
      - pyrootutils


#Using an environment.yaml file instead of requirements.txt can offer several advantages, especially when working with Conda as the package manager. Below are some reasons you might want to use environment.yaml:

#Dependency Control: Conda provides proper dependency control across all packages. When creating the environment using the environment.yaml file, Conda ensures that all package dependencies are fulfilled simultaneously, preventing any potential conflicts between different package versions.

#Binary Installation: Conda installs precompiled binaries for packages, which means that you don't need certain compilers or libraries installed on your system. This can simplify the setup process, especially for packages with complex build requirements.

#Specifying Versions: In environment.yaml, you can specify versions of packages to avoid any potential issues caused by installing the latest major versions. This approach helps to maintain consistency and stability across different environments and users.

#Channels: Conda allows you to specify channels from which packages will be installed. In the provided example, pytorch, conda-forge, and defaults channels are used. Channels offer a way to access different versions of packages and can be helpful in finding specific packages or custom distributions.

#Managing Pip Packages: The environment.yaml file can also include specific versions of packages installed via Pip. This allows you to use Conda for most package installations while still being able to install certain packages from PyPI using Pip.

#Virtual Environments: Conda environments, created from environment.yaml, offer a complete isolated environment with all the specified dependencies. This helps in maintaining clean and separate environments for different projects, avoiding conflicts between projects' dependencies.

#Reproducibility: The environment.yaml file provides a clear and reproducible specification of the environment needed for your project. This makes it easier to share and recreate the exact environment on different systems.

#In summary, using environment.yaml with Conda provides a powerful and flexible way to manage your project's dependencies, ensuring proper dependency control and easy reproducibility across different environments. It is especially useful when working with complex projects involving multiple packages and dependencies.