import hydra
from hydra.core.hydra_config import HydraConfig
from omegaconf import DictConfig


def test_train_config(cfg_train: DictConfig):
    assert cfg_train
    assert cfg_train.data
    assert cfg_train.model
    assert cfg_train.trainer

    HydraConfig().set_config(cfg_train)

    hydra.utils.instantiate(cfg_train.data)
    hydra.utils.instantiate(cfg_train.model)
    hydra.utils.instantiate(cfg_train.trainer)


def test_eval_config(cfg_eval: DictConfig):
    assert cfg_eval
    assert cfg_eval.data
    assert cfg_eval.model
    assert cfg_eval.trainer

    HydraConfig().set_config(cfg_eval)

    hydra.utils.instantiate(cfg_eval.data)
    hydra.utils.instantiate(cfg_eval.model)
    hydra.utils.instantiate(cfg_eval.trainer)



#These two test functions are testing the configuration objects for training (cfg_train) and evaluation (cfg_eval) generated by the fixtures. Here's what each test function does:

#test_train_config(cfg_train: DictConfig): This test function verifies the correctness and completeness of the cfg_train configuration object. It checks whether the required fields, such as data, model, and trainer, are present in the configuration.

#The test first asserts that cfg_train is not None, meaning that the configuration object is successfully generated.
#Then, it checks whether the key data is present in cfg_train.
#Similarly, it checks whether the keys model and trainer are present in cfg_train.
#Next, the function sets the current Hydra configuration to the cfg_train using HydraConfig().set_config(cfg_train). This step is important as it makes sure that the Hydra configuration is correctly set for the current test.
#Finally, the function instantiates objects using hydra.utils.instantiate for the data, model, and trainer configurations, which essentially verifies whether these configurations can be properly instantiated without any errors.
#test_eval_config(cfg_eval: DictConfig): This test function is similar to test_train_config but specifically checks the cfg_eval configuration object generated by the fixture for evaluation.

#The test first asserts that cfg_eval is not None, meaning that the configuration object is successfully generated.
#Then, it checks whether the key data is present in cfg_eval.
#Similarly, it checks whether the keys model and trainer are present in cfg_eval.
#The function then sets the current Hydra configuration to the cfg_eval using HydraConfig().set_config(cfg_eval).
#Finally, the function instantiates objects using hydra.utils.instantiate for the data, model, and trainer configurations, which verifies whether these configurations can be properly instantiated for evaluation.
#Both test functions play a crucial role in ensuring that the configuration objects for training and evaluation are correctly composed and can be used to instantiate data, model, and trainer objects without any issues during testing.