default_language_version:
  python: python3

repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      # list of supported hooks: https://pre-commit.com/hooks.html
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-docstring-first
      - id: check-yaml
      - id: debug-statements
      - id: detect-private-key
      - id: check-executables-have-shebangs
      - id: check-toml
      - id: check-case-conflict
      - id: check-added-large-files

  # python code formatting
  - repo: https://github.com/psf/black
    rev: 23.1.0
    hooks:
      - id: black
        args: [--line-length, "99"]

  # python import sorting
  - repo: https://github.com/PyCQA/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: ["--profile", "black", "--filter-files"]

  # python upgrading syntax to newer version
  - repo: https://github.com/asottile/pyupgrade
    rev: v3.3.1
    hooks:
      - id: pyupgrade
        args: [--py38-plus]

  # python docstring formatting
  - repo: https://github.com/myint/docformatter
    rev: v1.5.1
    hooks:
      - id: docformatter
        args: [--in-place, --wrap-summaries=99, --wrap-descriptions=99]

  # python check (PEP8), programming errors and code complexity
  - repo: https://github.com/PyCQA/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
        args:
          [
            "--extend-ignore",
            "E203,E402,E501,F401,F841",
            "--exclude",
            "logs/*,data/*",
          ]

  # python security linter
  - repo: https://github.com/PyCQA/bandit
    rev: "1.7.5"
    hooks:
      - id: bandit
        args: ["-s", "B101"]

  # yaml formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.0.0-alpha.6
    hooks:
      - id: prettier
        types: [yaml]
        exclude: "environment.yaml"

  # shell scripts linter
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.2
    hooks:
      - id: shellcheck

  # md formatting
  - repo: https://github.com/executablebooks/mdformat
    rev: 0.7.16
    hooks:
      - id: mdformat
        args: ["--number"]
        additional_dependencies:
          - mdformat-gfm
          - mdformat-tables
          - mdformat_frontmatter
          # - mdformat-toc
          # - mdformat-black

  # word spelling linter
  - repo: https://github.com/codespell-project/codespell
    rev: v2.2.4
    hooks:
      - id: codespell
        args:
          - --skip=logs/**,data/**,*.ipynb
          # - --ignore-words-list=abc,def

  # jupyter notebook cell output clearing
  - repo: https://github.com/kynan/nbstripout
    rev: 0.6.1
    hooks:
      - id: nbstripout

  # jupyter notebook linting
  - repo: https://github.com/nbQA-dev/nbQA
    rev: 1.6.3
    hooks:
      - id: nbqa-black
        args: ["--line-length=99"]
      - id: nbqa-isort
        args: ["--profile=black"]
      - id: nbqa-flake8
        args:
          [
            "--extend-ignore=E203,E402,E501,F401,F841",
            "--exclude=logs/*,data/*",
          ]



#This is a configuration file for pre-commit, a useful tool for managing and applying pre-commit hooks in your Git repository. Pre-commit hooks are scripts or tools that are executed before a commit is made to perform various checks and formatting tasks on the code, ensuring that it adheres to certain standards or conventions.

#In this configuration file, you have specified various pre-commit hooks, each provided by different repositories (URLs), along with their revisions (versions) and specific configurations (if any). Let's go through each hook:

#trailing-whitespace: Removes trailing whitespace at the end of lines.
#end-of-file-fixer: Ensures there is an empty line at the end of each file.
#check-docstring-first: Verifies that a docstring exists as the first statement in a module, function, or class.
#check-yaml: Validates YAML files for syntax errors.
#debug-statements: Checks for debug statements (e.g., print) in the code.
#detect-private-key: Searches for private keys in the codebase.
#check-executables-have-shebangs: Ensures executable files have shebangs (e.g., #!/usr/bin/env python).
#check-toml: Validates TOML files for syntax errors.
#check-case-conflict: Checks for files with names that differ only in case (case conflict).
#check-added-large-files: Prevents large files from being committed.
#And many more hooks...

#Each hook is specified by its unique identifier (id), and if necessary, additional arguments are provided to customize the hook's behavior.#

#For example, the hook black from the psf/black repository is used for Python code formatting. It is given the argument --line-length 99 to enforce a line length of 99 characters.

#Similarly, the hook flake8 from the PyCQA/flake8 repository is used for Python code checks. It is given the argument --extend-ignore E203,E402,E501,F401,F841 to extend the list of ignored error codes and --exclude logs/*,data/* to exclude certain directories from linting.

#Each hook is executed in the order they appear in the configuration file, and if any hook returns a non-zero exit code, the commit will be rejected.

#The configuration file effectively sets up a pipeline of pre-commit checks and formatting tasks, ensuring that your code complies with specific standards and practices before it is committed to the repository.