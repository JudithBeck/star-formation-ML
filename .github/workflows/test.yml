name: Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main, "release/*", "dev"]

jobs:
  run_tests_ubuntu:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest"]
        python-version: ["3.8", "3.9", "3.10"]

    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest
          pip install sh

      - name: List dependencies
        run: |
          python -m pip list

      - name: Run pytest
        run: |
          pytest -v

  run_tests_macos:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: ["macos-latest"]
        python-version: ["3.8", "3.9", "3.10"]

    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest
          pip install sh

      - name: List dependencies
        run: |
          python -m pip list

      - name: Run pytest
        run: |
          pytest -v

  run_tests_windows:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: ["windows-latest"]
        python-version: ["3.8", "3.9", "3.10"]

    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: List dependencies
        run: |
          python -m pip list

      - name: Run pytest
        run: |
          pytest -v

  # upload code coverage report
  code-coverage:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest
          pip install pytest-cov[toml]
          pip install sh

      - name: Run tests and collect coverage
        run: pytest --cov src # NEEDS TO BE UPDATED WHEN CHANGING THE NAME OF "src" FOLDER

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3




# name: Tests
# Dies ist der Name des Workflows - "Tests". Er wird verwendet, um Tests für das Repository auszuführen.

# on:
# Hier wird definiert, welche Ereignisse den Workflow auslösen. In diesem Fall wird der Workflow ausgelöst, wenn Code in den "main"-Branch gepusht wird (push-Ereignis).
# Außerdem wird der Workflow auch ausgelöst, wenn ein Pull Request erstellt wird, der auf den Branches "main", "release/*" oder "dev" basiert (pull_request-Ereignis).

# jobs:
# Dieser Abschnitt enthält die Liste der Jobs, die in diesem Workflow ausgeführt werden. Ein Job ist eine Sammlung von Schritten, die auf demselben Runner ausgeführt werden.

# run_tests_ubuntu:
# Dies ist der Name des ersten Jobs - "run_tests_ubuntu", der Tests auf einem Ubuntu-Runner ausführt.

# runs-on: ${{ matrix.os }}
# Hier wird der Runner spezifiziert, auf dem der Job ausgeführt wird. In diesem Fall verwendet der Job einen "matrix.os", um verschiedene Betriebssysteme zu unterstützen.

# strategy:
# Hier wird die Strategie für die Matrix-Optionen festgelegt. Die "fail-fast: false" Option bedeutet, dass der Workflow nicht sofort beendet wird, wenn ein Job fehlschlägt.
# Es wird eine Matrix erstellt, um verschiedene OS- und Python-Versionen auszuführen.

# matrix:
# Dies definiert die Matrix der verschiedenen Variablen, die für die "runs-on" und "strategy" verwendet werden.
# Der Job wird für jeden Eintrag in der Matrix mit den angegebenen OS- und Python-Versionen ausgeführt.

# timeout-minutes: 20
# Dies ist die maximale Zeit in Minuten, die der Job ausgeführt werden darf, bevor er automatisch abgebrochen wird.

# steps:
# Dies ist die Liste der einzelnen Schritte, die im Job ausgeführt werden. Jeder Schritt führt eine spezifische Aktion aus.

# - name: Checkout
# In diesem Schritt wird der Code in den Runner eingebunden. Die "actions/checkout@v3"-Action wird verwendet, um den Code aus dem Repository einzubinden.

# - name: Set up Python ${{ matrix.python-version }}
# In diesem Schritt wird die entsprechende Python-Version für den Job eingerichtet. Die "actions/setup-python@v3"-Action wird verwendet, um die Python-Version zu konfigurieren.

# - name: Install dependencies
# In diesem Schritt werden die Abhängigkeiten installiert. Die benötigten Python-Pakete werden über "pip install" installiert.
# Dabei wird die Datei "requirements.txt" verwendet, um die Abhängigkeiten aufzulisten.

# - name: List dependencies
# In diesem Schritt werden die installierten Abhängigkeiten aufgelistet, um zu überprüfen, ob sie korrekt installiert wurden.

# - name: Run pytest
# In diesem Schritt werden die Tests ausgeführt. Der Befehl "pytest -v" wird verwendet, um die Tests mit erhöhter Ausgabeverbosity auszuführen.

# run_tests_macos:
# Dies ist der Name des zweiten Jobs - "run_tests_macos", der Tests auf einem macOS-Runner ausführt.
# Der Rest der Struktur ist ähnlich wie bei "run_tests_ubuntu".

# run_tests_windows:
# Dies ist der Name des dritten Jobs - "run_tests_windows", der Tests auf einem Windows-Runner ausführt.
# Der Rest der Struktur ist ähnlich wie bei "run_tests_ubuntu".

# code-coverage:
# Dies ist der Name des vierten Jobs - "code-coverage", der für die Code-Coverage zuständig ist.
# Es verwendet einen Ubuntu-Runner.

# steps:
# Dies ist die Liste der einzelnen Schritte, die im Job ausgeführt werden. Jeder Schritt führt eine spezifische Aktion aus.

# - name: Checkout
# In diesem Schritt wird der Code in den Runner eingebunden. Die "actions/checkout@v2"-Action wird verwendet, um den Code aus dem Repository einzubinden.

# - name: Set up Python 3.10
# In diesem Schritt wird die Python-Version 3.10 für den Job eingerichtet.

# - name: Install dependencies
# In diesem Schritt werden die Abhängigkeiten installiert, einschließlich pytest-cov[toml], um die Code-Coverage zu erfassen.

# - name: Run tests and collect coverage
# In diesem Schritt werden die Tests ausgeführt und die Code-Coverage gesammelt. Der Befehl "pytest --cov src" wird verwendet, um die Tests mit der Coverage auszuführen.

# - name: Upload coverage to Codecov
# In diesem Schritt wird die Code-Coverage an Codecov hochgeladen, um sie zu erfassen und anzuzeigen.

