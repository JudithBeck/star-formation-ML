
help:  ## Show help
	@grep -E '^[.a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

clean: ## Clean autogenerated files
	rm -rf dist
	find . -type f -name "*.DS_Store" -ls -delete
	find . | grep -E "(__pycache__|\.pyc|\.pyo)" | xargs rm -rf
	find . | grep -E ".pytest_cache" | xargs rm -rf
	find . | grep -E ".ipynb_checkpoints" | xargs rm -rf
	rm -f .coverage

clean-logs: ## Clean logs
	rm -rf logs/**

format: ## Run pre-commit hooks
	pre-commit run -a

sync: ## Merge changes from main branch to your current branch
	git pull
	git pull origin main

test: ## Run not slow tests
	pytest -k "not slow"

test-full: ## Run all tests
	pytest

train: ## Train the model
	python src/train.py


#This is a Makefile with several helpful targets to manage and run various tasks related to your project. Each target is accompanied by a description (indicated by ##), explaining its purpose. Here's a breakdown of the available targets:

#help: Show help. This target will display a list of all available targets along with their descriptions.

#clean: Clean autogenerated files. This target will remove the dist directory and delete any .DS_Store, __pycache__, .pyc, .pyo, .pytest_cache, and .ipynb_checkpoints files and directories.

#clean-logs: Clean logs. This target will remove all files and directories within the logs directory.

#format: Run pre-commit hooks. This target will execute the pre-commit hooks to format the code.

#sync: Merge changes from the main branch to your current branch. This target will perform a git pull from the remote repository and update your current branch with the changes from the main branch.

#test: Run not slow tests. This target will execute pytest, running tests that are not marked as "slow" (-k "not slow").

#test-full: Run all tests. This target will execute pytest, running all available tests.

#train: Train the model. This target will run the src/train.py script to train the model.

#To use these targets, you can run make <target> in your terminal. For example, to clean autogenerated files, you can run make clean. Similarly, to run the tests, you can use either make test to run non-slow tests or make test-full to run all tests.

#Makefiles are a convenient way to automate repetitive tasks and manage project workflows. By using these targets, you can easily execute common commands without having to remember the specific commands or options.